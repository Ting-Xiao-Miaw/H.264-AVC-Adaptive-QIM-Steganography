import os
import shutil
import subprocess
from logger import log_print, clean_logs

RESULTS_DIR = "../results"
EXE_PATH = "../exes/lencod.exe"
LOG_FILE = "embed_log.txt"

METHOD_QP = {
    "Ma": [23, 28, 33],
    "Lin": [23, 28, 33],
    "Proposed": [23, 28, 33],
}


def run_embed(video_name, qp, method):
    # Run the lencod.exe -mode for a given video and QP
    
    cfg_path = os.path.join(RESULTS_DIR, video_name, f"qp{qp}", method, "encoder.cfg")
    if not os.path.exists(cfg_path):
        log_print(f"[Skipped] Missing encoder.cfg: {cfg_path}", LOG_FILE)
        return False

    log_print(f"[Embedding]: {video_name}, QP={qp}, Method={method}", LOG_FILE)   
    # Copy mapping.txt and mode.txt to current working directory
    src_dir = os.path.join(RESULTS_DIR, video_name, f"qp{qp}", method)
    for fname in ["mapping.txt", "mode.txt"]:
        src_path = os.path.join(src_dir, fname)
        if os.path.exists(src_path):
            try:
                shutil.copy(src_path, fname)
                log_print(f"Copied {fname} to working directory for embedding", LOG_FILE)
            except Exception as e:
                log_print(f"[Error] Failed to copy {fname}: {e}", LOG_FILE)
                return False
        else:
            log_print(f"[Missing] {fname} not found in {src_dir}", LOG_FILE)
            return False
    
    # Determine -mode method
    mode_flag = {
        "Ma": "M",
        "Lin": "L",
        "Proposed": "P",
    }.get(method)

    if mode_flag is None:
        log_print(f"[Error] Unknown method: {method}", LOG_FILE)
        return False

    # Run lencod.exe with the configuration and mode
    result = subprocess.run([EXE_PATH, "-d", cfg_path, "-mode", mode_flag,], capture_output=True, text=True)
    
    # Remove temporary files
    for fname in ["mapping.txt", "mode.txt"]:
        if os.path.exists(fname):
            os.remove(fname)
            log_print(f"Deleted temporary file {fname}", LOG_FILE)

    if result.returncode != 0:
        log_print(f"[Failed] {video_name} QP={qp} Method={method}", LOG_FILE)
        log_print(result.stderr, LOG_FILE)
        return False
    
    log_print(f"[Success] {video_name} QP={qp} Method={method}", LOG_FILE)

    # Output filenames generated by lembed
    raw_264 = f"{video_name}.264"
    raw_yuv = f"{video_name}_rec.yuv"

    target_dir = os.path.join(RESULTS_DIR, video_name, f"qp{qp}", method)

    # Move and rename
    try:
        shutil.move(raw_264, os.path.join(target_dir, "embedded.264"))
        shutil.move(raw_yuv, os.path.join(target_dir, "embedded_rec.yuv"))
        shutil.move("sender_message.txt", os.path.join(target_dir, "sender_message.txt"))
        log_print(f"[Saved] Outputs moved to {target_dir}", LOG_FILE)
        return True
    except FileNotFoundError as e:
        log_print(f"[Error] Output file missing: {e}", LOG_FILE)
        return False


def run_all_embeds():
    # Run embedding for all videos and QPs
    success = []
    fail = []

    video_names = [f for f in os.listdir(RESULTS_DIR) if os.path.isdir(os.path.join(RESULTS_DIR, f))]

    for video in video_names:  
        for method, qps in METHOD_QP.items():
            for qp in qps:
                ok = run_embed(video, qp, method)
                if ok:
                    success.append((video, qp, method))
                else:
                    fail.append((video, qp, method))

    log_print("\n==== Embedding Summary ====", LOG_FILE)
    log_print(f"Success count: {len(success)}", LOG_FILE)
    log_print(f"Failure count: {len(fail)}", LOG_FILE)
    if fail:
        log_print("Failure items:", LOG_FILE)
        for v, q, m in fail:
            log_print(f" - {v}, QP={q}, Method={m}", LOG_FILE)

    clean_logs()


if __name__ == "__main__":
    run_all_embeds()